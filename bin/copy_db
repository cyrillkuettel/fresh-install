#!/usr/bin/env python3

import click
import subprocess
import re
from typing import Optional


class DatabaseError(Exception):
    """Custom exception for database operations"""

    pass


def run_command(
    command: str, check: bool = True
) -> subprocess.CompletedProcess:
    """
    Run a shell command and return the result.

    Args:
        command: The command to run
        check: Whether to raise an exception on non-zero exit status

    Returns:
        CompletedProcess instance
    """
    try:
        result = subprocess.run(
            command, shell=True, check=check, text=True, capture_output=True
        )
        return result
    except subprocess.CalledProcessError as e:
        raise DatabaseError(f"Command failed: {e.stderr}")


def validate_db_name(db_name: str) -> bool:
    """
    Validate database name.

    Args:
        db_name: Database name to validate

    Returns:
        bool: True if valid, False otherwise
    """
    return bool(re.match(r'^[a-zA-Z0-9_]+$', db_name))


def database_exists(db_name: str) -> bool:
    """
    Check if database exists.

    Args:
        db_name: Database name to check

    Returns:
        bool: True if exists, False otherwise
    """
    cmd = f"sudo -u postgres psql -lqt | cut -d \| -f 1 | grep -qw {db_name}"
    result = run_command(cmd, check=False)
    return result.returncode == 0


@click.group()
def cli():
    """Database management CLI tool"""
    pass


@cli.command()
@click.argument('db_name')
@click.option(
    '--force', is_flag=True, help='Force creation even if database exists'
)
def create(db_name: str, force: bool):
    """Create a new database with the specified name"""
    try:
        if not validate_db_name(db_name):
            raise DatabaseError(
                "Database name can only contain letters, numbers, and underscores"
            )

        if database_exists(db_name):
            if not force:
                raise DatabaseError(f"Database '{db_name}' already exists")
            click.echo(f"Database '{db_name}' exists, dropping it first...")
            run_command(f"sudo -u postgres dropdb {db_name}")

        click.echo(f"Creating database '{db_name}'...")
        run_command(
            f"sudo -u postgres psql -c 'CREATE DATABASE {db_name} WITH TEMPLATE privatim;'"
        )

        click.echo("Setting privileges and timezone...")
        run_command(
            f"""
            sudo -u postgres psql -d {db_name} -c "
                GRANT ALL PRIVILEGES ON DATABASE {db_name} TO dev;
                ALTER DATABASE {db_name} SET timezone TO 'UTC';
            "
        """
        )

        click.echo(f"Database '{db_name}' setup completed successfully")

    except DatabaseError as e:
        click.echo(f"Error: {str(e)}", err=True)
        raise click.Abort()


@cli.command()
@click.argument('db_name')
@click.option(
    '--force', is_flag=True, help='Force deletion without confirmation'
)
def delete(db_name: str, force: bool):
    """Delete the specified database"""
    try:
        if not database_exists(db_name):
            raise DatabaseError(f"Database '{db_name}' does not exist")

        if not force:
            if not click.confirm(
                f"Are you sure you want to delete database '{db_name}'?"
            ):
                click.echo("Operation cancelled")
                return

        click.echo(f"Deleting database '{db_name}'...")
        run_command(f"sudo -u postgres dropdb {db_name}")
        click.echo(f"Database '{db_name}' deleted successfully")

    except DatabaseError as e:
        click.echo(f"Error: {str(e)}", err=True)
        raise click.Abort()


@cli.command()
def list():
    """List all databases"""
    try:
        click.echo("Fetching database list...")
        result = run_command(
            "sudo -u postgres psql -c '\l' | awk 'NR>3 {print $1}' | grep -v '('"
        )
        click.echo("\nAvailable databases:")
        click.echo(result.stdout)

    except DatabaseError as e:
        click.echo(f"Error: {str(e)}", err=True)
        raise click.Abort()


if __name__ == '__main__':
    cli()
