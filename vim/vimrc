set encoding=UTF-8

set shiftwidth=4
set tabstop=4
set expandtab
set autoindent

set smarttab

" Almost never do I use regex in vim
set nomagic

" Mainly useful when writing .tex 
set wrap

" Incremental search
set incsearch

" Line Numbering
set number
set relativenumber

" Make it obvious where 80 characters is
set textwidth=80
set colorcolumn=+1
set scrolloff=10
set clipboard^=unnamed,unnamedplus


let mapleader = " "

" easy search access
nnoremap <leader>s /


syntax on
colorscheme monokai

" re-map the escape key for leaving insert mode
inoremap jk <ESC>
vnoremap jk <Esc>

" Makes sense: since I use this very frequently
nnoremap Ã¤ A

" Ingore Ex mode
map Q <Nop>

" Stay in visual mode when indenting
vnoremap < <gv
vnoremap > >gv

nnoremap Y yg$

" move lines up and down. 
" In normal mode or in insert mode, press Alt-j to move the current line down, 
" or press Alt-k to move the current line up.
" After visually selecting a block of lines (for example, by pressing V then
" moving the cursor down), press Alt-j to move the whole block down, or press
" Alt-k to move the block up. from here, but this uses alt which somehow was not
" working. 
" https://vim.fandom.com/wiki/Moving_lines_up_or_down

nnoremap <C-j> :m+<CR>==
nnoremap <C-k> :m-2<CR>==
inoremap <C-j> <Esc>:m+<CR>==gi
inoremap <C-k> <Esc>:m-2<CR>==gi
vnoremap <C-j> :m'>+<CR>gv=gv
vnoremap <C-k> :m-2<CR>gv=gv

" select everything
nnoremap <C-a> ggVG


" Swap functionality of Ctrl + i and Ctrl + o in jump list
" ... Can't un-learn it. 
nnoremap <C-I> <C-O>
nnoremap <C-O> <C-I>

" For me, Vim stopped being able to copy to the * and + registers over SSH, 
" even though :echo has('clipboard') was 1, and other X programs still worked. 
" The solution for me was to add a mapping that yanks (via a register) to xclip:
" It's a hack, and there surely must be a better way.
" But in the end, who cares really?
vnoremap <silent><Leader>y +yy <Bar> :call system('xclip', @y)<CR>

" I want to keep clipboard when pasting 
xnoremap p P

" This unsets the 'last search pattern' register by hitting return
" https://stackoverflow.com/questions/657447/vim-clear-last-search-highlighting
nnoremap <CR> :noh<CR><CR>

" Ignore ex mode 
map Q <Nop>


" https://chat.openai.com/share/6d5f1e31-d506-4fa6-80eb-451108c8567b
" switch to soft wrapping while maintaining vertical movement with j and k 
nnoremap j gj
nnoremap k gk
nnoremap <leader>g :Goyo<CR>

" feature flag for Goyo because Goyo issues when opening at line number (why?)
if empty($NO_GOYO)
  " The environment variable NO_GOYO is not present. So we can run Goyo

    " https://github.com/junegunn/goyo.vim/wiki/Customization#ensure-q-to-quit-even-when-goyo-is-active
    function! s:goyo_enter()
      let b:quitting = 0
      let b:quitting_bang = 0
      autocmd QuitPre <buffer> let b:quitting = 1
      cabbrev <buffer> q! let b:quitting_bang = 1 <bar> q!

       set noshowmode
       set noshowcmd
       " prevent horizontal scrolling
       set sidescrolloff=0 
       set scrolloff=999

       " Hard wrap at textwidth
       set formatoptions+=t

    endfunction

    function! s:goyo_leave()
      " Quit Vim if this is the only remaining buffer
      if b:quitting && len(filter(range(1, bufnr('$')), 'buflisted(v:val)')) == 1
        if b:quitting_bang
          qa!
        else
          qa
        endif
      endif
    endfunction

    autocmd! User GoyoEnter call <SID>goyo_enter()
    autocmd! User GoyoLeave call <SID>goyo_leave()


    "Goyo settings
    let g:goyo_height= '100%'
    let g:goyo_margin_top = 0
    let g:goyo_margin_bottom = 0

    " https://github.com/junegunn/goyo.vim/issues/273
    " Enables line numbers even in Goyo mode
    let g:goyo_linenr=1




    " Enable Goyo automatically for Markdown and text
    function! StartGoyo(...)
        if &filetype == 'markdown' || &filetype == 'tex'
            Goyo
        endif
    endfunction

    autocmd BufRead,BufNewFile *.md,*.tex :call timer_start(10, 'StartGoyo')
    autocmd BufWinEnter *.md,*.tex :call StartGoyo()
endif

function! SurroundWithBackticks()
    " Store the current cursor position
    let l:save_pos = getpos(".")
    
    " Get the current word boundaries
    normal! viw
    let l:start = getpos("'<")
    let l:end = getpos("'>")
    
    " Return to normal mode
    normal! v
    
    " Insert backticks around the word
    call setpos('.', l:end)
    execute "normal! a`"
    call setpos('.', l:start)
    execute "normal! i`"
    
    " Restore cursor position (adjusted for inserted backticks)
    let l:save_pos[2] += 1  " Adjust column position
    call setpos('.', l:save_pos)
endfunction

" Map it to a key combination (example: <Leader>`)
nnoremap <Leader>m :call SurroundWithBackticks()<CR>


call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'

" Make sure you use single quotes
Plug 'michaeljsmith/vim-indent-object'

Plug 'junegunn/goyo.vim'

Plug 'tpope/vim-surround'

"VimTeX is a modern Vim and Neovim filetype and syntax plugin for LaTeX files.
Plug 'lervag/vimtex'
    let g:tex_flavor='latex'
    let g:vimtex_view_method='zathura'
    let g:vimtex_quickfix_mode=0

call plug#end()

" Search and open file
noremap <leader>o :call fzf#run({'source': 'fd --type f -e tex -e md -e bib -e log', 'sink': 'e', 'window': '30vnew'})<CR><CR>

