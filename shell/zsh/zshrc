# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
#
ZSH_THEME="fino-time"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
COMPLETION_WAITING_DOTS="false"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"


# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

VIM_MODE_VICMD_KEY='jk'


plugins=(git
	zsh-syntax-highlighting
	zsh-autosuggestions
	zsh-vim-mode
    zsh-autocomplete
	)

fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"
#
ZSH_AUTOSUGGEST_STRATEGY=(history completion)



alias 'fresh'='cd ~/fresh-install'
alias 'black'='black --line-length=79 --skip-string-normalization'
alias fcf='test -d "$(fzf)" || : $_:h; cd -- $_'

function fyf() {
  local selected_file
  
  if [[ "$PWD" == *"/Users/cyrill/ba/ba/cyrill"* ]]; then
    #  only include .text directories in the search
    selected_file=$(fd --type f --extension tex | fzf)
  else
    # In other directories, include all files and directories in the search
    selected_file=$(fzf)
  fi
  
  if [[ -n "$selected_file" ]]; then
    # Set the title of the Vim window to the name of the file
    vim -c "let &titlestring = '${selected_file}' | set title" "$selected_file"
    realpath "$selected_file"
  fi
}


# Beware: cave man approach to merge conflicts...
# This however works like a charm if the other branch differs by one commit only
function resolve_merge() {
  git reset HEAD~
  git add -A
  git stash 
  git pull
  git stash pop
  git add -A
  git commit
}

# copy result path of fzf to clipboard
alias fff='echo $(fzf) | xsel -b'

alias fof='xdg-open $(fzf)'

alias o='xdg-open'
alias fresh='cd ~/fresh-install && git pull'
alias yk='xsel -i -b'
alias upup='sudo apt-get update && sudo apt-get upgrade'
alias 'yk'='xsel -i -b'
alias 'fresh'='cd ~/fresh-install && git pull'

# cd "$(command)" to jump to result of original path of soft link Ω(Φ(X))
alias 'src'='cd "$(readlink -f `which ~/src` | head -n 1)"'
# Shows the current semester week (needs to be updated after each semester)
alias sw='echo $(($(date +%U)-7))'

alias vz='vim ~/.zshrc && source ~/.zshrc'
alias vv='vim ~/.vimrc'
alias vg='vim ~/.gitconfig'

# shortcut to the git alias
alias f='git f '

# use the fzf command to select a file or directory 
# and then change the current working directory to the selected path
alias fcf='test -d "$(fzf)" || : $_:h; cd -- $_'

# copy result of fzf to clipboard
alias fff='echo $(fzf) | xsel -b'

alias fof='xdg-open $(fzf)'

# show print statement in pytest (don't capture STOUT)
alias pytest='pytest -s'



# adb: this is meant to be run on the device
# putting it here for reference
alias adb_set_proxy="adb shell settings put global http_proxy $(ip -o -4 addr show ens33 | awk '{print $4}' | sed 's/\/.*//g'):8080"

alias adb_unset_proxy="adb shell settings put global http_proxy  :0"
 
# git pull all directories depth 1
function pullall () {
/usr/bin/ls | xargs -P10 -I{} git -C {} pull
}


function gs() {
    local selected_branch=$(git branch | fzf)
    selected_branch="$(echo "$selected_branch" | xargs)" # handy way to remove whitespace

    git switch ${selected_branch}
    
     if [ $? -ne 0 ]; then
         if [ "$(git branch --show-current)" = "$selected_branch" ]; then
              echo "Already on branch $selected_branch !"
         fi
     fi
}



# Navigation
function .. () { cd .. }
function ... () { cd ../.. }
function .... () { cd ../../.. }
function ..... () { cd ../../../.. }


# grep *docx and *docm files
docxgrep() {
    if [[ -z $1 ]]; then
        echo "Usage: docxgrep <keyword>"
        return 1
    fi
    
    keyword="$1"
    
    /usr/bin/fdfind -t f -e docx -e docm . | while read -r arg; do
        if unzip -p "$arg" 2>/dev/null | rg -q  --ignore-case --fixed-strings "$keyword"; then
            echo "$arg"
        fi
    done
}


# Convenient and pretty `git diff` on steroids
git-fuzzy-diff()
{
    FZF_DEFAULT_OPTS="
        --ansi
        --reverse
        --height=100%
        --bind shift-down:preview-down
        --bind shift-up:preview-up
        --bind pgdn:preview-page-down
        --bind pgup:preview-page-up
        --bind q:abort
        $GIT_FZF_DEFAULT_OPTS
    "

	PREVIEW_PAGER="less --tabs=4 -Rc"
	ENTER_PAGER=${PREVIEW_PAGER}
	if [ -x "$(command -v diff-so-fancy)" ]; then
		PREVIEW_PAGER="diff-so-fancy | ${PREVIEW_PAGER}"
		ENTER_PAGER="diff-so-fancy | sed -e '1,4d' | ${ENTER_PAGER}"
	fi

	# Don't just diff the selected file alone, get related files first using
	# '--name-status -R' in order to include moves and renames in the diff.
	# See for reference: https://stackoverflow.com/q/71268388/3018229
	PREVIEW_COMMAND='git diff --color=always '$@' -- \
		$(echo $(git diff --name-status -R '$@' | grep {}) | cut -d" " -f 2-) \
		| '$PREVIEW_PAGER

	# Show additional context compared to preview
	ENTER_COMMAND='git diff --color=always '$@' -U10000 -- \
		$(echo $(git diff --name-status -R '$@' | grep {}) | cut -d" " -f 2-) \
		| '$ENTER_PAGER

	git diff --name-only $@ | \
		fzf ${GIT_FZF_DEFAULT_OPTS} --exit-0 --preview "${PREVIEW_COMMAND}" \
		--preview-window=top:85% --bind "enter:execute:${ENTER_COMMAND}"
}


# Search git commits messages with fzf
git-fuzzy-log()
{
	PREVIEW_COMMAND='f() {
		set -- $(echo -- "$@" | grep -o "[a-f0-9]\{7\}")
		[ $# -eq 0 ] || (
			git show --no-patch --color=always $1
			echo
			git show --stat --format="" --color=always $1 |
			while read line; do
				tput dim
				echo " $line" | sed "s/\x1B\[m/\x1B\[2m/g"
				tput sgr0
			done |
			tac | sed "1 a \ " | tac
		)
	}; f {}'

	ENTER_COMMAND='(grep -o "[a-f0-9]\{7\}" | head -1 |
		xargs -I % bash -ic "git-fuzzy-diff %^1 %") <<- "FZF-EOF"
		{}
		FZF-EOF'

	git log --graph --color=always --format="%C(auto)%h %s%d " | \
		fzf ${GIT_FZF_DEFAULT_OPTS} --no-sort --tiebreak=index \
		--preview "${PREVIEW_COMMAND}" --preview-window=top:15 \
		--bind "enter:execute:${ENTER_COMMAND}"
}

#### Block is responsible for activating ssh agent upon login
# We could solve this with systemd, but I prefer having all config and so on
# and so forth in one place, the zshrc.
SSH_ENV="$HOME/.ssh/agent-environment"
function start_agent {
    echo "Initialising new SSH agent..."
    /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
    echo succeeded
    chmod 600 "${SSH_ENV}"
    . "${SSH_ENV}" > /dev/null
    /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
    . "${SSH_ENV}" > /dev/null
    #ps ${SSH_AGENT_PID} doesn't work under cywgin
    ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
        start_agent;
    }
else
    start_agent;
fi



#####
#
#
HISTFILE=~/.zsh_history
HISTSIZE=999999999 # I don't think zsh has a setting that means “infinite”, but for all practical purpose, one billion is infinite.
SAVEHIST=$HISTSIZE

# Prevent vim freeze acccidentally
stty -ixon 

# Load environment variables
if [ -f ~/.bash_profile ]; then 
    . ~/.bash_profile;
fi

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# ripgrep
# =======
# In my opintion, hidden files should be searched by default.
# Especially when trying to find something related to configuration, 
# these things are often put into hidden files in user
alias rg='rg --hidden'


# search starting from home
export FZF_DEFAULT_COMMAND="rg --files --hidden $HOME"
# export FZF_DEFAULT_COMMAND="rg --files --no-ignore-vcs --hidden $HOME"

